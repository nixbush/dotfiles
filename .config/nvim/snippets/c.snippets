#
# Control Flow
#
snippet if
	if (${1:true}) {
		$0
	}
snippet ifel
	if (${1:true}) {
		$2
	}
	else if (${2:false}) {
		$3
	}
snippet el
	else {
		$0
	}
snippet elif
	else if (${2:false}) {
		$0
	}
snippet ? "Ternary Operator"
	$1 ? $2 : $0
snippet switch
	switch (${1:value}) {
		case $2:
			$0
			break;
		default:
			break;
	}
snippet while
	while(${1:true}) {
		$0
	}
snippet do
	do {
		$0
	} while(${1:true});
snippet for
	for (size_t ${2:i} = ${3:0}; ${2:i} < ${1:count}; ++${2:i}) {
		$0
	}
snippet forr
	for (size_t ${2:i} = ${1:count}; ${2:i} > ${3:0}; --${2:i}) {
		$0
	}
snippet fort
	for (${1:int} ${2:i} = ${3:0}; ${2:i} ${4:< 0}; ${5:++${2:i}}) {
		$0
	}
#
# Templates
#
snippet sst
	#include <stdlib.h>
	#include <stdio.h>

	int main(int argc, const char *argv[]) {
		${1:puts("Hello, World!");}
		return 0;
	}
snippet main
	int main(${1:int argc, const char *argv[]}) {
		${2:puts("Hello, World!");}
		return 0;
	}
#
# Preproccesor Macros
#
snippet #inc
	#include <${1:...}>
snippet #Inc
	#include "${1:...}"
snippet #if
	#if ${1:0}

	$0

	#endif // ${1:0}
snippet #ifdef
	#ifdef ${1:DEBUG}

	$0

	#endif // ${1:DEBUG}
snippet #ifndef
	#ifdef ${1:DEBUG}

	$0

	#endif // !${1:DEBUG}
snippet guard
	#ifndef ${1:`toupper(expand("%:t:r")) . "_" . toupper(expand("%:t:e"))`}
	#define ${1:`toupper(expand("%:t:r")) . "_" . toupper(expand("%:t:e"))`}

	$0

	#endif // !${1:`toupper(expand("%:t:r")) . "_" . toupper(expand("%:t:e"))`}
snippet nocpp
	#ifdef __cplusplus
	extern "C" {
	#endif

	$0

	#ifdef __cplusplus
	}
	#endif
snippet #err
	#error "${1:ERROR}"
snippet #warn
	#warning "${1:WARNING}"
#
# Structures
#
snippet fn
	${2:void} ${1:name}(${3:void}) {
		$0
	}
snippet struct
	struct ${1:name} {
		$0
	};
snippet tstruct
	typedef struct ${1:name} {
		$0
	} ${1:name};
snippet union
	union ${1:name} {
		$0
	};
snippet tunion
	typedef union ${1:name} {
		$0
	} ${1:name};
snippet enum
	enum ${1:name} {
		$0
	};
snippet tenum
	typedef enum ${1:name} {
		$0
	} ${1:name};
#
# Helpers
#
snippet pri
	printf("${1:message}\n");
snippet epri
	fprintf(stderr, "${1:message}\n");
snippet priv "Call printf() to log value of a variable"
	printf("$2 = %${1:i}\n", $2);
